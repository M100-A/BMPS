## CURSES conversion notes.

Makefile, main.c and common.c are overwritten with the versions in this directory.
savescreen.c and gamelogic00.c are added.
There are other files that are ignored.


Starting with Version 0.80, the focus changed from providing the BMPS game in CURSES form to a providing a standalone mini-web server instead.

The reason is simple. Both the CGI-BIN and standalone mini-web server allow for showing the player images along with the game text. The CURSES version cannot do that (because CURSES, by its very nature, is limited to text only).

Version 0.70 was the last release of BMPS created for the CURSES interface. The CURSES program still compiles, and the source code is still here. It will still work, but the images will not be included in the output (of course). I still like the CURSES interface, as it does not rely upon the presence of a web browser.

However, if I wasn't using a web browser, then the game would have to use another method to interact with the screen for showing the images, such as SDL or SFML. As wonderful (and time consuming) as it would be to build the game to interact with the screen like that, just thinking about the code and environment build dependancies is a nightmare. Maintaining the web browser interface is enough as it is, so I will just maintain that one interface for now.

There is no difference in the CURSES interface version of BMPS between v0.70 and v0.80 anyway (the only alteration is the version number, the text and game engine is exactly identical).

The big change between v0.70 and v0.80 was essentially the addition of the images in amongst the game text. This is the primary reason for the focus shift to the standalone mini-web server.

The rest of the listings and logic adjust themselves to running in a CGI-BIN setup, thanks to a #define in common.c that triggers #ifdef and #ifndef statements in the other listings.

However, the save file structure for the CURSES version does not match the save file structure for the other versions of the game. You have been warned.


The shift away from CURSES wasn't just because of the images, but because of the need to produce windows versions of the game binaries is currently relying upon an old Windows 7 system that I have, that has "stability issues", along with a installation of a Microsoft VC++ compiler environment that I won't be able to obtain anymore. This is aside from the fact that Microsoft are doing everything in their power to destroy all running Windows 7 systems in existance (the forced upgrade to Windows 10). I had not undertaken the effort to make the PDCurses library outside of that development environment, so it was a definite concern.

When I created the standalone mini-web server version of the game with Version 0.80, I was able to use MinGW (with a codeblocks IDE), which is essentially a more available and portable C compiler. I can install that compiler package onto later versions of Windows operating system platforms, without all of the hoop-jumping to install the Microsoft offical Visual C++ environment. The opensource compiler provides me with the means to continue building for the Win32 platform after I finally get around to replacing my Windows 7 system (hopefully before it finally dies).

Considering PDCurses does not allow cut-and-paste like it's *NIX native counterpart, and my HTML interface for my games is a lot easier for people than the CURSES version, the CURSES version will not be missed much. My attempt to create a command input editor in CURSES wasn't well accepted. I believe one /dgg/ poster used the term "clunky as fuck" to describe it.

To compile this on windows, you are going to need the Win32a PDCurses (http://www.projectpluto.com/win32a.htm). Not that I am expecting anyone to even try.

Linux users just need the development environment (consisting of headers and library elements) to link in the curses library, which isn't necessarily there by default either.


The CURSES version has 2 extra command line switches than the mini-web server version. Here is the full list:

-t changes to default the entry mode to Arrow-selection (instead of Direct-input).
Using this switch means that if the user exclusively uses Arrow-selection mode all of the time, they don't have to press tab (or down arrow) to enter it. This saves the player (you) from pressing one key to enter the mode. Some people use this to play the game with a single hand, with just the Page Up, Page Down, Home, End, Enter and Arrow Keys in the list selection mode at all times.

-D turns on debug output. In BMPS this just changes the "Give me a hint" primary navigation menu, so that the locations of unknown and partially known NPCs are shown, "progress values" are shown next to the names of the NPCs, and #, * and $ identifiers are used for if the NPC is exhausted, sound asleep or is locked. Also, "Give me a hint" is always available (unlike in non-debug mode, it is unavailable for a while depending upon the difficulty level).

-L turns on a log output. A file called BMPS-Log.txt will be created in the current working directory and written to as the program runs. This is useful for windows users who want to get to the text to highlight mistakes or errors, as PDCurses does not allow for cut and paste of text.


M100
