Bunny, Mayoress, Prostitute & Succubus (BMPS) - Game

Type: Text Adventure/Interactive Fiction
Version: 0.80 (Friday 2nd December 2016)
Platforms: Linux and Windows command prompt mini-web-server, accessed with a web browser.
Original Author: M100 (M100-A)
Images by: Inkeranon (http://notreallybuttpants.tumblr.com/)
Synopsis: The mayor of Belchwood hired a new prostitute for his village, so he could watch his fellow male villagers reduce yet another unfortunate woman to being a mind broken sex slave. He accidentally hired a succubus for the job. She turned the mayor to being her obedient servant. Bunny then took over from the mayor, and now is now plotting to break the other 63 men of Belchwood.

Github note: There is a file called BMPSfiles.dat, which contains all of the images that the mini-web-server serves. However, given that the file contains pornographic images, I should not be uploading that to github.


# Usage (run) instructions:

On Linux:
First you need to compile the program (see below).
Once the program is compiled, run the program from a command line (xterm or SSH session).

Note: There is no Linux binary distributed, so you will need to compile the source code.
Note2: I have found "differences" between various Linux distributions in relation to linkage to shared library (.so) files that cause programs to not necessarily be as cross compatible. I am not taking my chances, so I am just supplying the source code.


On Windows:
Run the program from either a command line or click on the program.
Note: a Windows binary is available.

When the program starts, it will output something like this:
 BMPS Version 0.80 is starting.
 BMPSfiles.dat Catalog = 331 bytes
 BMPSfiles.dat CatalogEntries = 7
 BMPSfiles.dat checks out ok.
 Schedule: 64 NPCs loaded and checked.
 bound & listening.
 Connect with a web browser to this URL:
 http://127.0.0.1:6081/
 Use Ctrl-C to stop the program.

The URL supplied is the one that you use a web browser to connect to.


When you have finished with the program, you can press Ctrl-C in the window to close the program.


# System requirements:

On Linux:
gcc compiler
make

Note: you may need to load packages for your Linux distribution for any of the above.


On Windows: (if you want to compile the code)
a C compiler (I used CodeBlocks with MinGW)

Note: I supply the binary for Windows, which should work.


# Compile instructions:

On Linux:
Unpack the files in a directory, navigate to that directory.
Use the "make" command to create the program.
"BMPS" will be created in the directory.


On Windows:
Create a project within you compiler.
Then import the BMPS source code.
You will need to include the WIN32 compile define before compiling.
You will need to link to the ws2_32 library before compiling/linking.
Then start building the program.


# Usage (play) instructions:

When you go to the URL with a web browser, you begin in the main menu, the program has a series of buttons.

The standalone web server version borrows heavily from the CGI-BIN version, so autosave is turned on at all times. The menu mostly matches the CGI-BIN version.

You can also change the "skin" used by the program which dictates the type of font and if the text is black on white, or white on black.


# Command line options:

BMPS (standalone web server version) has 1 optional command line switch, and 2 optional parameters.

-D turns on debug output. In BMPS this just changes the "Give me a hint" primary navigation menu, so that the locations of unknown and partially known NPCs are shown, "progress values" are shown next to the names of the NPCs, and #, * and $ identifiers are used for if the NPC is exhausted, sound asleep or is locked. Also, "Give me a hint" is always available (unlike in non-debug mode, it is unavailable for a while depending upon the difficulty level).

The first optional parameter is the port. The program defaults to 6081, but you can change it at the command line.
For example: ./BMPS 8080

The second optional parameter is the bind IPaddress. The program defaults to 127.0.0.1. However, you need to also specify the port before it.
For example: ./BMPS 8080 127.0.0.2


# Program output:

As you play BMPS via the web browser, the program in its text window will be outputing the log information into the window as you do things.

 Use Ctrl-C to stop the program.
 client 127.0.0.1 18121: GET /, S 200 done.
 client 127.0.0.1 18633: GET /favicon.ico, File ico done.
 client 127.0.0.1 20169: POST /, 17 posted bytes, S 200 done.
 client 127.0.0.1 20681: GET /images/Concept1.jpg, File jpg done.
 client 127.0.0.1 21193: POST /, 19 posted bytes, S 200 done.
 client 127.0.0.1 23241: POST /, 17 posted bytes, S 200 done.
 client 127.0.0.1 23457: POST /, 43 posted bytes, S 200 done.
 client 127.0.0.1 23969: GET /images/StartScene1.jpg, File jpg done.
 client 127.0.0.1 23481: GET /images/StartScene2.jpg, File jpg done.
 client 127.0.0.1 23993: POST /, 43 posted bytes, S 200 done.
 client 127.0.0.1 24753: Invalid HTTP structure.. 500 done.
 client 127.0.0.1 25529: POST /, 43 posted bytes, S 200 done.

If you know your HTTP status codes, you would probably see that 500 an be freaking out (second last line). My only advice is don't.

This sometimes happens when web browsers decide to connect to web servers, then realize after they have connected that they have no immediate use for the connection (this happens when caching is involved). The 500 response is triggered because the mini-web server is waiting for input from the web browser, however the web browser decides that it no longer needs the TCP/IP connection and closes it down. The mini-web server ends the communication by trying to send a 500 response back to the web browser, which explains why the 500 response is logged. The web browser should never see it.


M100

